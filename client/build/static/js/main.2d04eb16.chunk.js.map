{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","pages/Success.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","variables","i","push","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Success","addOrder","setTimeout","replace","saveOrder","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2d04eb16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\r\n  if (count === 1) {\r\n    return name\r\n  }\r\n  return name + 's'\r\n}\r\nexport function idbPromise(storeName, method, object) {\r\n  return new Promise((resolve, reject) => {\r\n    //open connection to the database `shop-shop` with the version of 1\r\n    const request = window.indexedDB.open('shop-shop', 1);\r\n\r\n    //create variables to hold reference to the database, transaction (tx), and object store\r\n    let db, tx, store;\r\n\r\n    //if version has changed(or if this is the first time using the database), run this method and create the three object stores\r\n    request.onupgradeneeded = function(e) {\r\n      const db = request.result;\r\n      //create object store for each type of data and set \"primary\" key index to be the `_id ` of the data\r\n      db.createObjectStore('products', {keyPath: '_id'});\r\n      db.createObjectStore('categories', {keyPath: '_id'});\r\n      db.createObjectStore('cart', {keyPath: '_id'});\r\n    };\r\n    //handle any errors with connection\r\n    request.onerror = function(e) {\r\n      console.log('THERE WAS AN ERROR!!!');\r\n    };\r\n    //on database open success\r\n    request.onsuccess = function(e) {\r\n      //save a reference of the database to the `db` variable\r\n      db = request.result;\r\n      //open a transaction do whatever pass into `storeName` (mush match one of the object store names)\r\n      tx = db.transaction(storeName, \"readwrite\");\r\n      //save a reference to that object store\r\n      store = tx.objectStore(storeName);\r\n\r\n      //if theres any errors, let us know\r\n      db.onerror = function(e) {\r\n        console.log('error', e);\r\n      };\r\n      switch(method) {\r\n        case 'put':\r\n          store.put(object);\r\n          resolve(object);\r\n          break;\r\n        case 'get':\r\n          const all =store.getAll();\r\n          all.onsuccess=function() {\r\n            resolve(all.result);\r\n          };\r\n          break;\r\n          case 'delete':\r\n            store.delete(object._id);\r\n            break;\r\n            default:\r\n              console.log('No valid method');\r\n              break;\r\n      }\r\n      //when the transaction is complete, close the connection\r\n      tx.oncomplete = function() {\r\n        db.close();\r\n      };\r\n    };\r\n  });\r\n}","import { useReducer } from 'react';\r\nimport {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    ADD_TO_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART\r\n} from \"./actions\";\r\n\r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        //if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n\r\n        case UPDATE_PRODUCTS:\r\n            return{\r\n                ...state,\r\n                products: [...action.products],\r\n            };\r\n// if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\r\n            case UPDATE_CATEGORIES:\r\n                return{\r\n                    ...state,\r\n                    categories: [...action.categories]\r\n                };\r\n            case UPDATE_CURRENT_CATEGORY:\r\n                return{\r\n                    ...state,\r\n                    currentCategory: action.currentCategory\r\n                };\r\n            case ADD_TO_CART:\r\n                return{\r\n                    ...state,\r\n                    cartOpen: true,\r\n                    cart: [...state.cart, action.product]\r\n                };\r\n            case ADD_MULTIPLE_TO_CART:\r\n                return{\r\n                    ...state,\r\n                    cart: [...state.cart, ...action.products],\r\n                };\r\n            case REMOVE_FROM_CART:\r\n                let newState = state.cart.filter(product => {\r\n                    return product._id !==action._id;\r\n                });\r\n                return{\r\n                    ...state,\r\n                    cartOpen: newState.length > 0,\r\n                    cart: newState\r\n                }\r\n            case UPDATE_CART_QUANTITY:\r\n                return{\r\n                    ...state,\r\n                    cartOpen: true,\r\n                    cart: state.cart.map(product => {\r\n                        if(action._id === product._id) {\r\n                            product.purchaseQuantity = action.purchaseQuantity;\r\n                        }\r\n                        return product;\r\n                    })\r\n                };\r\n            case CLEAR_CART:\r\n                return {\r\n                    ...state,\r\n                    cartOpen: false,\r\n                    cart: []\r\n                };\r\n            case TOGGLE_CART:\r\n                return {\r\n                    ...state,\r\n                    cartOpen: !state.cartOpen\r\n                };\r\n                //if it's none of these actions, do not update state at all and keep thing the same.\r\n                default:\r\n                    return state;\r\n    }\r\n};\r\n\r\nexport function useProductReducer(initialState) {\r\n    return useReducer(reducer,initialState);\r\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\nexport const UPDATE_CATEGORIES  = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\r\nexport const CLEAR_CART = \"CLEAR_CART\";\r\nexport const TOGGLE_CART = \"TOGGLE_CART\";\r\n","import React, { createContext, useContext} from \"react\";\r\nimport { useProductReducer } from './reducers';\r\n\r\nconst StoreContext = createContext();\r\nconst { Provider } = StoreContext;\r\n\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n    const [state, dispatch] = useProductReducer({\r\n        products: [],\r\n        categories: [],\r\n        cartOpen: false,\r\n        cart: [],\r\n        currentCategory: '',\r\n    });\r\n    //use this to confirm it works!\r\n\r\n    console.log(state);\r\n    return <Provider value={[state, dispatch]} {...props} />;\r\n};\r\n\r\nconst useStoreContext = () => {\r\n    return useContext(StoreContext);\r\n};\r\n\r\nexport { StoreProvider, useStoreContext };\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\"\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nfunction ProductItem(item) {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const {\r\n    image,\r\n    name,\r\n    _id,\r\n    price,\r\n    quantity\r\n  } = item;\r\n\r\n  const { cart } = state\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: _id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...item, purchaseQuantity: 1 }\r\n      });\r\n      idbPromise('cart', 'put', {...item, purchaseQuantity: 1});\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card px-1 py-1\">\r\n      <Link to={`/products/${_id}`}>\r\n        <img\r\n          alt={name}\r\n          src={`/images/${image}`}\r\n        />\r\n        <p>{name}</p>\r\n      </Link>\r\n      <div>\r\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\r\n        <span>${price}</span>\r\n      </div>\r\n      <button onClick={addToCart}>Add to cart</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductItem;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n{\r\n  categories {\r\n    _id\r\n    name\r\n  }\r\n}\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n{\r\n  user {\r\n    firstName\r\n    lastName\r\n    orders {\r\n      _id\r\n      purchaseDate\r\n      products {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        quantity\r\n        image\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const QUERY_CHECKOUT = gql`\r\n  query getCheckout($products: [ID]!) {\r\n      checkout(products: $products) {\r\n        session\r\n      }\r\n\r\n  }\r\n`;","import React, { useEffect } from \"react\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport ProductItem from \"../ProductItem\";\r\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\r\nimport spinner from \"../../assets/spinner.gif\"\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nfunction ProductList() {\r\n  const [ state, dispatch ] = useStoreContext();\r\n  const { currentCategory } = state;\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n  \r\n  useEffect(() => {\r\n    //if there's data to be stored\r\n    if(data) {\r\n      //lets store it in the global state object\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n      //but lets also take each product and save it to IndexedDB using the helper function\r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n      //add else if to check if `loading` is undefined in `useQuery()`\r\n    } else if (!loading) {\r\n      //since we're offline, get all of the data from the `products` store\r\n      idbPromise('products', 'get').then((products) => {\r\n        //use retrieved data to set global state for offline browsing\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products\r\n        });\r\n      });\r\n    }\r\n  }, [data, loading, dispatch]);\r\n\r\n  function filterProducts() {\r\n    if(!currentCategory) {\r\n      return state.products;\r\n    }\r\n    return state.products.filter(product => product.category._id === currentCategory);\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      <h2>Our Products:</h2>\r\n      {state.products.length ? (\r\n        <div className=\"flex-row\">\r\n            {filterProducts().map(product => (\r\n                <ProductItem\r\n                  key= {product._id}\r\n                  _id={product._id}\r\n                  image={product.image}\r\n                  name={product.name}\r\n                  price={product.price}\r\n                  quantity={product.quantity}\r\n                />\r\n            ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any products yet!</h3>\r\n      )}\r\n      { loading ? \r\n      <img src={spinner} alt=\"loading\" />: null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n","import React, { useEffect } from \"react\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, UPDATE_PRODUCTS } from \"../../utils/actions\";\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\n\r\n\r\nfunction CategoryMenu() {\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n  const [state, dispatch] = useStoreContext();\r\n  const { categories } = state;\r\n    useEffect(() => {\r\n      //if categoryData exists or has changed from the response of useQuery, then run dispatch()\r\n      if(categoryData) {\r\n        //execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to \r\n        dispatch({\r\n          type: UPDATE_CATEGORIES,\r\n          categories: categoryData.categories\r\n        });\r\n        //write category data to the `categories` object store in IndexedDB when we save categories to state\r\n        categoryData.categories.forEach(category => {\r\n          idbPromise('categories', 'put', category);\r\n        });\r\n      } else if (!loading) {\r\n        idbPromise('categories', 'get').then(categories => {\r\n          dispatch({\r\n            type: UPDATE_PRODUCTS,\r\n            categories: categories\r\n          });\r\n        });\r\n      }\r\n    },[categoryData, loading, dispatch]\r\n    );\r\n    const handleClick = id => {\r\n      dispatch({\r\n        type: UPDATE_CURRENT_CATEGORY,\r\n        currentCategory: id\r\n      });\r\n    };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h2>Choose a Category:</h2>\r\n      {categories.map(item => (\r\n        <button\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}\r\n        >\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;\r\n","import React from 'react';\r\nimport {useStoreContext} from '../../utils/GlobalState';\r\nimport {REMOVE_FROM_CART, UPDATE_CART_QUANTITY} from '../../utils/actions';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nconst CartItem = ({ item }) => {\r\n    const [,dispatch] = useStoreContext();\r\n\r\n    const removeFromCart = item => {\r\n        dispatch({\r\n            type: REMOVE_FROM_CART,\r\n            _id: item._id\r\n        });\r\n        idbPromise('cart', 'delete', {...item});\r\n    };\r\n    const onChange = (e) => {\r\n        const value = e.target.value;\r\n\r\n        if(value === '0') {\r\n            dispatch({\r\n                type: REMOVE_FROM_CART,\r\n                _id: item._id\r\n            });\r\n            idbPromise('cart', 'delete', { ...item });\r\n        } else {\r\n            dispatch({\r\n                type: UPDATE_CART_QUANTITY,\r\n                _id: item._id,\r\n                purchaseQuantity: parseInt(value)\r\n            });\r\n            idbPromise('cart', 'put', { ...item,purchaseQuantity: parseInt(value) });\r\n        }\r\n    };\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img\r\n          src={`/images/${item.image}`}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <div>{item.name}, ${item.price}</div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1\"\r\n            value={item.purchaseQuantity}\r\n            onChange={onChange}\r\n          />\r\n          <span\r\n            role=\"img\"\r\n            aria-label=\"trash\"\r\n            onClick={() => removeFromCart(item)}\r\n          >\r\n            🗑️\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CartItem;","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useEffect } from 'react';\r\nimport CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport './style.css';\r\nimport { useStoreContext }from '../../utils/GlobalState';\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\r\nimport { QUERY_CHECKOUT} from '../../utils/queries';\r\nimport { loadStripe} from '@stripe/stripe-js';\r\nimport { useLazyQuery } from '@apollo/react-hooks';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\n\r\n\r\nconst Cart = () => {\r\n  \r\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n    const [state, dispatch] = useStoreContext();\r\n    useEffect(() => {\r\n      async function getCart() {\r\n        const cart = await idbPromise('cart', 'get');\r\n        dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n      };\r\n      if (!state.cart.length) {\r\n        getCart();\r\n      }\r\n    }, [state.cart.length, dispatch]);\r\n    console.log(state);\r\n    useEffect(() => {\r\n      if (data) {\r\n        stripePromise.then((res) => {\r\n          res.redirectToCheckout({ sessionId: data.checkout.session });\r\n        });\r\n      }\r\n    }, [data]);\r\n    function toggleCart() {\r\n        dispatch({ type: TOGGLE_CART });\r\n    }\r\n        if (!state.cartOpen) {\r\n            return (\r\n                <div className = \"cart-closed\" onClick={toggleCart}>\r\n                    <span\r\n                    role=\"img\"\r\n                    aria-label=\"trash\">🛒</span>\r\n                </div>\r\n            );\r\n        }\r\n    function calculateTotal() {\r\n        let sum = 0;\r\n        state.cart.forEach(item => {\r\n            sum += item.price * item.purchaseQuantity;\r\n        });\r\n        return sum.toFixed(2);\r\n    }\r\n    function submitCheckout() {\r\n      const productIds = [];\r\n      getCheckout({\r\n        variables: { products: productIds }\r\n      });\r\n    \r\n      state.cart.forEach((item) => {\r\n        for (let i = 0; i < item.purchaseQuantity; i++) {\r\n          productIds.push(item._id);\r\n        }\r\n      });\r\n    }\r\n \r\n\r\n  return (\r\n<div className=\"cart\">\r\n  <div className=\"close\" onClick={toggleCart}>[close]</div>\r\n  <h2>Shopping Cart</h2>\r\n  {state.cart.length ? (\r\n    <div>\r\n      {state.cart.map(item => (\r\n        <CartItem key={item._id} item={item} />\r\n      ))}\r\n      <div className=\"flex-row space-between\">\r\n        <strong>Total: ${calculateTotal()}</strong>\r\n        {\r\n          Auth.loggedIn() ?\r\n            <button onClick = {submitCheckout}>\r\n              Checkout\r\n            </button>\r\n            :\r\n            <span>(log in to check out)</span>\r\n        }\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <h3>\r\n      <span role=\"img\" aria-label=\"shocked\">\r\n      😲\r\n      </span>\r\n      You haven't added anything to your cart yet!\r\n    </h3>\r\n  )}\r\n</div>\r\n  )}; \r\nexport default Cart;\r\n\r\n\r\n","import React\r\n//{useState}\r\nfrom \"react\";\r\nimport ProductList from \"../components/ProductList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\nimport Cart from '../components/Cart';\r\n\r\nconst Home = () => {\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <CategoryMenu />\r\n      <ProductList />\r\n      <Cart/>\r\n    </div>\r\n  );\r\n};\r\n\r\n//   const [currentCategory, setCategory] = useState(\"\");\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <CategoryMenu setCategory={setCategory} />\r\n//       <ProductList currentCategory={currentCategory} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport Cart from \"../components/Cart\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport {\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  ADD_TO_CART,\r\n  UPDATE_PRODUCTS,\r\n} from \"../utils/actions\";\r\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\r\nimport { idbPromise } from '../utils/helpers';\r\nimport spinner from '../assets/spinner.gif';\r\n\r\nfunction Detail() {\r\n  const [state, dispatch] = useStoreContext();\r\n  const { id } = useParams();\r\n\r\n  const [currentProduct, setCurrentProduct] = useState({})\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  const { products, cart } = state;\r\n\r\n  useEffect(() => {\r\n    //already in global state\r\n    if (products.length) {\r\n      setCurrentProduct(products.find(product => product._id === id));\r\n    } //retrieved from server \r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n    }\r\n    //get cache from idb\r\n    else if(!loading) {\r\n      idbPromise('products', 'get').then((indexedProducts) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: indexedProducts\r\n        });\r\n      });\r\n    }\r\n  }, [products, data, loading, dispatch, id]);\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      //if we're updating quantity use existing item data and increment purchaseQuantity value by one\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...currentProduct, purchaseQuantity: 1 }\r\n      });\r\n      //if product isn't in the cart yet, add it to the current shopping cart in indexedDB\r\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\r\n    }\r\n  }\r\n\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: currentProduct._id\r\n    });\r\n    //upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate the product to remove\r\n    idbPromise('cart', 'delete', {...currentProduct});\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {currentProduct && cart ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">\r\n            ← Back to Products\r\n          </Link>\r\n\r\n          <h2>{currentProduct.name}</h2>\r\n\r\n          <p>\r\n            {currentProduct.description}\r\n          </p>\r\n\r\n          <p>\r\n            <strong>Price:</strong>\r\n            ${currentProduct.price}\r\n            {\" \"}\r\n            <button onClick={addToCart}>\r\n              Add to Cart\r\n            </button>\r\n            <button \r\n              disabled={!cart.find(p => p._id === currentProduct._id)} \r\n              onClick={removeFromCart}\r\n            >\r\n              Remove from Cart\r\n            </button>\r\n          </p>\r\n\r\n          <img\r\n            src={`/images/${currentProduct.image}`}\r\n            alt={currentProduct.name}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      {\r\n        loading ? <img src={spinner} alt=\"loading\" /> : null\r\n      }\r\n      <Cart />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React, {useEffect} from 'react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport  Jumbotron from '../components/Jumbotron';\r\nimport { ADD_ORDER } from '../utils/mutations';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\nfunction Success(){\r\n    const [addOrder] = useMutation(ADD_ORDER);\r\n\r\n    useEffect(() => {\r\n        async function saveOrder(){\r\n            const cart = await idbPromise('cart','get');\r\n            const products = cart.map(item => item._id);\r\n\r\n            if(products.length) {\r\n                const { data } = await addOrder({ variables: { products } });\r\n                const productData = data.addOrder.products;\r\n\r\n                productData.forEach((item) => {\r\n                    idbPromise('cart', 'delete', item);\r\n                })\r\n            setTimeout(() => {\r\n                window.location.replace('/');\r\n            }, 3000);\r\n            }\r\n        }\r\n        saveOrder();\r\n    }, [addOrder]);\r\n    return (\r\n        <div>\r\n            <Jumbotron>\r\n                <h1>Success!</h1>\r\n                <h2>Thank you for your purchase!</h2>\r\n                <h2>You will now be redirected to the homepage</h2>\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Success;","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport ApolloClient from 'apollo-boost';\r\n\r\nimport Home from \"./pages/Home\";\r\nimport Detail from \"./pages/Detail\";\r\nimport NoMatch from \"./pages/NoMatch\";\r\nimport Login from \"./pages/Login\";\r\nimport Signup from \"./pages/Signup\";\r\nimport Success from \"./pages/Success\";\r\nimport Nav from \"./components/Nav\";\r\nimport OrderHistory from \"./pages/OrderHistory\";\r\nimport {StoreProvider} from \"./utils/GlobalState\";\r\n\r\nconst client = new ApolloClient({\r\n  request: (operation) => {\r\n    const token = localStorage.getItem('id_token')\r\n    operation.setContext({\r\n      headers: {\r\n        authorization: token ? `Bearer ${token}` : ''\r\n      }\r\n    })\r\n  },\r\n  uri: '/graphql',\r\n})\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          <StoreProvider>\r\n          <Nav />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Route exact path=\"/signup\" component={Signup} />\r\n            <Route exact path=\"/orderHistory\" component={OrderHistory} />\r\n            <Route exact path=\"/products/:id\" component={Detail} />\r\n            <Route exact path=\"/success\" component={Success} />\r\n            <Route component={NoMatch} />\r\n          </Switch>\r\n          </StoreProvider>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}